<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Capture</title>
    <link rel="stylesheet" href="/user.css" />
    <script src="https://maps.googleapis.com/maps/api/js?key=<%= process.env.GOOGLE_MAP_API_KEY %>&libraries=places"></script>
    <style>
      body {
        font-family: Arial, sans-serif;
        line-height: 1.6;
        margin: 0;
        padding: 0;
        background-color: #ebf4ff;
      }

      .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
      }

      .inline {
        margin-bottom: 20px;
      }

      video, canvas {
        width: 100%;
        max-width: 400px;
        height: auto;
        display: block;
        margin: 0 auto;
      }

      #capture {
        display: block;
        margin: 10px auto;
        padding: 10px 20px;
        background-color: #4CAF50;
        color: white;
        border: none;
        cursor: pointer;
        font-size: 16px;
      }

      form {
        background-color: white;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
      }

      h2, h3 {
        color: #333;
      }

      input[type="text"], select {
        width: 100%;
        padding: 10px;
        margin: 10px 0;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-sizing: border-box;
      }

      button[type="submit"] {
        background-color: #4CAF50;
        color: white;
        padding: 12px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
        width: 100%;
      }

      button[type="submit"]:hover {
        background-color: #45a049;
      }

      .back-button {
        display: block;
        text-align: center;
        margin: 40px 0;
      }

      .back-button button {
        background-color: #3182ce;
        color: #ffff;
        border: none;
        margin-bottom: 50px;
        padding: 10px 20px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s ease;
      }

      .back-button button:hover {
        background-color: #5da1e0;
      }

      @media (max-width: 600px) {
        .container {
          padding: 10px;
        }

        video, canvas {
          max-width: 100%;
        }

        form {
          padding: 10px;
        }
      }
    </style>
  </head>

  <body>
    <%- include('./partials/header.ejs') %>
    <% if (locals.user) { %>
    <div class="container">
      <div class="inline">
        <video id="video" autoplay></video>
        <button id="capture">Capture</button>
      </div>

      <div class="inline">
        <canvas id="canvas"></canvas>
      </div>

      <form
        action="/upload"
        method="post"
        id="uploadForm"
        enctype="multipart/form-data"
      >
        <input type="file" name="image" id="imageInput" style="display: none" />
        <div>
          <h2>Write your complaint</h2>
          <input
            type="text"
            name="complain"
            id="complain"
            placeholder="Describe the litter here..."
          />
        </div>
        <div>
          <h3>Address of litter with landmark</h3>
          <input
            type="text"
            name="address"
            id="address"
            placeholder="Write the proper address of litter with landmark..."
          />
        </div>

        <div>
          <h3>Enter the Type of Waste:</h3>
          <select name="category" id="category">
            <option value="Electronic">Electronic</option>
            <option value="Dry">Dry</option>
            <option value="Wet">Wet</option>
            <option value="Glass">Glass</option>
            <option value="Plastic">Plastic</option>
            <option value="RadioActive">RadioActive</option>
          </select>
        </div>

        <div>
          <h3>Enter the Size of Waste:</h3>
          <select name="weight" id="weight">
            <option value="Under 1kg">Under 1kg</option>
            <option value="1-5kg">1-5kg</option>
            <option value="5-10kg">5-10kg</option>
            <option value="Above 10kg">Above 10kg</option>
          </select>
        </div>
        <button type="submit">Upload</button>
      </form>

      <a href="/home" class="back-button">
        <button>Back</button>
      </a>
    </div>

    <%- include('./partials/footer.ejs') %>
    <% } else { %>
    <%- include('./partials/notuser.ejs') %>
    <% } %>

    <script>
      const video = document.getElementById("video");
      const canvas = document.getElementById("canvas");
      const captureButton = document.getElementById("capture");
      const uploadForm = document.getElementById("uploadForm");
      const imageInput = document.getElementById("imageInput");
      const complainInput = document.getElementById("complain");
      const addressInput = document.getElementById("address");

      const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);

      const constraints = {
        video: isMobile ? { facingMode: { exact: "environment" } } : true,
      };

      navigator.mediaDevices
        .getUserMedia(constraints)
        .then((stream) => {
          video.srcObject = stream;
        })
        .catch((err) => {
          console.error("Error accessing camera: ", err);
        });

      captureButton.addEventListener("click", () => {
        const context = canvas.getContext("2d");
        context.drawImage(video, 0, 0, canvas.width, canvas.height);
        canvas.toBlob((blob) => {
          const file = new File([blob], "capture.png", { type: "image/png" });
          const dataTransfer = new DataTransfer();
          dataTransfer.items.add(file);
          imageInput.files = dataTransfer.files;
        }, "image/png");
      });

      // Function to get and set the address
      function getAndSetAddress() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(
            (position) => {
              const latitude = position.coords.latitude;
              const longitude = position.coords.longitude;

              // Use Google Maps Geocoding API to get the address
              const geocoder = new google.maps.Geocoder();
              const latlng = new google.maps.LatLng(latitude, longitude);

              geocoder.geocode({ latLng: latlng }, function (results, status) {
                if (status === google.maps.GeocoderStatus.OK) {
                  if (results[0]) {
                    const address = results[0].formatted_address;
                    addressInput.value = address;
                  }
                } else {
                  console.error("Geocoder failed due to: " + status);
                }
              });
            },
            (error) => {
              console.error("Error getting location:", error);
            }
          );
        } else {
          alert("Geolocation is not supported by this browser.");
        }
      }

      // Call the function to get and set the address when the page loads
      window.addEventListener("load", getAndSetAddress);

      uploadForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        const formData = new FormData(uploadForm);
        const complainValue = complainInput.value.trim();
        formData.append("complain", complainValue);

        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(
            async (position) => {
              const latitude = position.coords.latitude;
              const longitude = position.coords.longitude;

              formData.append(
                "location",
                JSON.stringify([{ latitude, longitude }])
              );
              formData.append("address", addressInput.value);

              submitForm(formData);
            },
            (error) => {
              console.error("Error getting location:", error);
              submitForm(formData);
            }
          );
        } else {
          alert("Geolocation is not supported by this browser.");
          submitForm(formData);
        }
      });

      function submitForm(formData) {
        fetch("/upload", {
          method: "POST",
          body: formData,
        })
          .then((response) => response.json())
          .then((result) => {
            if (result.message) {
              alert(result.message);
            } else {
              alert("Upload successful");
            }
          })
          .catch((error) => {
            console.error("Error uploading file:", error);
            alert("Upload failed");
          });
      }
    </script>
  </body>
</html>